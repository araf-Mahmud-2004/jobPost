import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { User, IUserDocument } from '../models/userModel';
import { AppError } from './errorHandler';

// Extend Express Request type to include user
declare global {
  namespace Express {
    interface Request {
      user?: IUserDocument;
    }
  }
}

// Interface for requests with user
export interface IRequestWithUser extends Request {
  user?: IUserDocument;
}

// Protect routes - only for authenticated users
export const protect = async (req: IRequestWithUser, res: Response, next: NextFunction) => {
  try {
    // 1) Get token and check if it exists
    let token;
    const authHeader = req.headers.authorization;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      token = authHeader.split(' ')[1];
    } else if (req.cookies?.jwt) {
      token = req.cookies.jwt;
    }

    if (!token) {
      return next(
        new AppError('You are not logged in! Please log in to get access.', 401)
      );
    }

    // 2) Verify token
    if (!process.env.JWT_SECRET) {
      return next(new AppError('JWT secret is not configured', 500));
    }

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET) as { id: string; iat: number };
    } catch (err) {
      return next(new AppError('Invalid token. Please log in again!', 401));
    }

    // 3) Get user with passwordChangedAt field
    const currentUser = await User.findById(decoded.id).select('+passwordChangedAt +role +email +name');
    if (!currentUser) {
      return next(new AppError('The user belonging to this token no longer exists.', 401));
    }

    // 4) Check if user changed password after the token was issued
    if (currentUser.passwordChangedAt) {
      const changedTimestamp = new Date(currentUser.passwordChangedAt).getTime() / 1000;
      if (decoded.iat < changedTimestamp) {
        return next(
          new AppError('User recently changed password! Please log in again.', 401)
        );
      }
    }

    // GRANT ACCESS TO PROTECTED ROUTE
    req.user = currentUser;
    res.locals.user = currentUser.toObject();
    next();
  } catch (err) {
    next(err);
  }
};

// Restrict routes to specific roles
export const restrictTo = (...roles: string[]) => {
  return (req: IRequestWithUser, res: Response, next: NextFunction) => {
    // roles ['admin', 'employer']
    if (!roles.includes(req.user?.role as string)) {
      return next(
        new AppError('You do not have permission to perform this action', 403)
      );
    }
    next();
  };
};

// Only for rendered pages, no errors!
export const isLoggedIn = async (req: IRequestWithUser, res: Response, next: NextFunction) => {
  try {
    if (req.cookies.jwt) {
      // 1) Verify token
      const decoded = jwt.verify(req.cookies.jwt, process.env.JWT_SECRET as string) as { id: string; iat: number };

      // 2) Check if user still exists
      const currentUser = await User.findById(decoded.id);
      if (!currentUser) {
        return next();
      }

      // 3) Check if user changed password after the token was issued
      if (currentUser.changedPasswordAfter(decoded.iat as number)) {
        return next();
      }

      // THERE IS A LOGGED IN USER
      res.locals.user = currentUser;
      return next();
    }
  } catch (err) {
    return next();
  }
  next();
};
