import mongoose, { Document, Model, Schema, FilterQuery, Query } from 'mongoose';
// Custom email validation function
const validateEmail = (email: string) => {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
};
import bcrypt from 'bcryptjs';
import crypto from 'crypto';

// Base user interface
export interface IUser {
  name: string;
  email: string;
  photo?: string;
  role: 'user' | 'employer' | 'admin';
  password: string;
  passwordConfirm: string | undefined;
  passwordChangedAt?: Date;
  passwordResetToken?: string;
  passwordResetExpires?: Date | number;
  active: boolean;
  comparePasswords(candidatePassword: string, userPassword: string): Promise<boolean>;
  changedPasswordAfter(JWTTimestamp: number): boolean;
  createPasswordResetToken(): string;
}

// Create schema
const userSchema = new Schema<IUserDocument>({
  name: {
    type: String,
    required: [true, 'Please tell us your name!'],
    trim: true,
  },
  email: {
    type: String,
    required: [true, 'Please provide your email'],
    unique: true,
    lowercase: true,
    validate: [validateEmail, 'Please provide a valid email'],
  },
  photo: String,
  role: {
    type: String,
    enum: ['user', 'employer', 'admin'],
    default: 'user',
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
    minlength: 8,
    select: false,
  },
  passwordConfirm: {
    type: String,
    required: [true, 'Please confirm your password'],
    validate: {
      // This only works on CREATE and SAVE!!!
      validator: function (this: IUser, el: string) {
        return el === this.password;
      },
      message: 'Passwords are not the same!',
    },
  },
  passwordChangedAt: Date,
  passwordResetToken: String,
  passwordResetExpires: Date,
  active: {
    type: Boolean,
    default: true,
    select: false,
  },
});

// Document Middleware
userSchema.pre(/^find/, function (this: mongoose.Query<any, any>, next) {
  // This points to the current query
  this.find({ active: { $ne: false } });
  next();
});

userSchema.pre('save', async function (this: IUserDocument, next) {
  // Only run this function if password was actually modified
  if (!this.isModified('password')) return next();

  // Hash the password with cost of 12
  this.password = await bcrypt.hash(this.password, 12);

  // Delete passwordConfirm field
  this.passwordConfirm = undefined;
  next();
});

userSchema.pre('save', function (this: IUserDocument, next) {
  if (!this.isModified('password') || this.isNew) return next();
  this.passwordChangedAt = new Date(Date.now() - 1000);
  next();
});

// Instance Methods
userSchema.methods.comparePasswords = async function (
  candidatePassword: string,
  userPassword: string
): Promise<boolean> {
  return await bcrypt.compare(candidatePassword, userPassword);
};

userSchema.methods.changedPasswordAfter = function (JWTTimestamp: number): boolean {
  if (this.passwordChangedAt) {
    const changedTimestamp = Math.floor(this.passwordChangedAt.getTime() / 1000);
    return JWTTimestamp < changedTimestamp;
  }
  // False means NOT changed
  return false;
};

userSchema.methods.createPasswordResetToken = function (): string {
  const resetToken = crypto.randomBytes(32).toString('hex');

  this.passwordResetToken = crypto
    .createHash('sha256')
    .update(resetToken)
    .digest('hex');

  this.passwordResetExpires = Date.now() + 10 * 60 * 1000; // 10 minutes

  return resetToken;
};

// User document interface
export interface IUserDocument extends IUser, mongoose.Document {
  _id: mongoose.Types.ObjectId;
  id: string;
  __v?: number;
  isModified(path?: string): boolean;
  isNew: boolean;
}

// User model interface
type IUserModel = mongoose.Model<IUserDocument> & {
  find(query?: FilterQuery<IUserDocument>): mongoose.Query<IUserDocument[], IUserDocument>;
  findById(id: mongoose.Types.ObjectId | string): mongoose.Query<IUserDocument | null, IUserDocument>;
  findOne(query?: FilterQuery<IUserDocument>): mongoose.Query<IUserDocument | null, IUserDocument>;
}

// Create and export the model
const User = mongoose.model<IUserDocument, IUserModel>('User', userSchema);

export { User };

declare global {
  namespace Express {
    interface User {
      id: string;
      role: string;
      email: string;
      name: string;
    }
  }
}
